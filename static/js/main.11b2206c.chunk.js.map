{"version":3,"sources":["Component/Loading.js","Component/Search.js","Component/Kitten.js","Component/KittenList.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","role","Search","onSearchChange","type","onChange","aria-label","aria-describedby","style","width","Kitten","name","src","alt","KittenList","kittens","map","user","i","key","id","username","App","state","searchField","loading","event","setState","target","value","this","fetch","then","response","json","data","filteredKittens","filter","kitten","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAYeA,EAVC,WACZ,OACI,yBAAKC,UAAU,iCACX,yBAAKA,UAAU,iBAAiBC,KAAK,UACjC,0BAAMD,UAAU,WAAhB,iBCIDE,EARA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACd,OACI,yBAAKH,UAAU,qDACX,2BAAOI,KAAK,OAAOC,SAAUF,EAAgBH,UAAU,8CAA8CM,aAAW,uBAAuBC,mBAAiB,gCCU9JC,EAAQ,CACVC,MAAO,SAGIC,EAjBA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACI,yBAAKX,UAAU,+BACX,yBAAKA,UAAU,OAAOQ,MAAOA,GACzB,yBAAKI,IAAG,+BAA0BD,EAA1B,iBAA+CX,UAAU,eAAea,IAAI,YACpF,yBAAKb,UAAU,aACf,wBAAIA,UAAU,8BAA8BW,OCc7CG,EAnBI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,OACI,yBAAKf,UAAU,eAEXe,EAAQC,KAAI,SAACC,EAAKC,GAClB,OACA,6BACA,kBAAC,EAAD,CACAC,IAAKJ,EAAQG,GAAGE,GAChBT,KAAMI,EAAQG,GAAGG,iBCuCdC,G,iNA5CbC,MAAQ,CACNR,QAAU,GACVS,YAAa,GACbC,SAAS,G,EAWXtB,eAAiB,SAACuB,GAChB,EAAKC,SAAS,CAAEH,YAAaE,EAAME,OAAOC,S,mFATvB,IAAD,OAClBC,KAAKH,SAAS,CAACF,SAAS,IAExBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKR,SAAS,CAAEZ,QAAUoB,EAAOV,SAAS,S,+BAOhD,IAAD,EACqCK,KAAKP,MAAzCR,EADD,EACCA,QAAUS,EADX,EACWA,YAEhB,GAHK,EACyBC,QAG1B,OAAO,kBAAC,EAAD,MAKP,IAAMW,EAAkBrB,EAAQsB,QAAO,SAAAC,GACrC,OAAOA,EAAOjB,SAASkB,cAAcC,SAAShB,EAAYe,kBAG5D,OACE,6BACE,gCACI,wBAAIvC,UAAU,sCAAd,iBAEJ,kBAAC,EAAD,CAAQG,eAAkB2B,KAAK3B,iBAC/B,kBAAC,EAAD,CAAYY,QAASqB,EAAiBpC,UAAU,iB,GAtC5CyC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.11b2206c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React from \"react\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n    return (\r\n        <div className=\"w-50 mx-auto input-group mt-3 input-group-sm mb-3\">\r\n            <input type=\"text\" onChange={onSearchChange} className=\"form-control text-center font-weight-bolder\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\nconst Kitten = ({ name }) => {\r\n    return (\r\n        <div className=\"col-md-3 col-sm-6 ml-3 mb-3\">\r\n            <div className=\"card\" style={style}>\r\n                <img src={`https://robohash.org/${name}.png?set=set4`} className=\"card-img-top\" alt=\"pokemon\" />\r\n                <div className=\"card-body\">\r\n                <h3 className=\"card-title text-center m-2\">{name}</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst style = {\r\n    width: \"18rem\"\r\n}\r\n\r\nexport default Kitten;","import React from \"react\";\r\nimport Kitten from \"./Kitten\";\r\n\r\nconst KittenList = ({ kittens }) => {\r\n    return (\r\n        <div className=\"row kittens\">\r\n        {\r\n            kittens.map((user,i) => {\r\n            return (\r\n            <div>\r\n            <Kitten\r\n            key={kittens[i].id}\r\n            name={kittens[i].username}\r\n            /> \r\n            </div>\r\n            )\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KittenList;","import React , { Component } from 'react';\nimport Loading from \"./Component/Loading\";\nimport Search from \"./Component/Search\";\nimport KittenList from \"./Component/KittenList\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    kittens : [],\n    searchField: \"\",\n    loading: false\n  }\n\n  componentDidMount() {\n    this.setState({loading: true})\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => this.setState({ kittens : data , loading: false}))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n      let { kittens , searchField , loading } = this.state;\n      // Runs this while data is being fetched from news api\n      if (loading) {\n          return <Loading />\n      }\n\n      // Runs this when data is fetched\n      else {\n          const filteredKittens = kittens.filter(kitten =>{\n            return kitten.username.toLowerCase().includes(searchField.toLowerCase());\n          })\n\n          return (\n            <div>\n              <header>\n                  <h2 className=\"text-center m-3 font-weight-bolder\">Kitten World</h2>\n              </header>\n              <Search onSearchChange = {this.onSearchChange} />\n              <KittenList kittens={filteredKittens} className=\"kittens\" />\n            </div>\n          )\n      }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}